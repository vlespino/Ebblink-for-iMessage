//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Vincent Espino on 10/25/16.
//  Copyright Â© 2016 Vincent Espino. All rights reserved.
//

#import "MessagesViewController.h"
@import SafariServices; // Needed for the SFSafariViewController class.
#import <ebblinkSDK/Ebblink.h>

@interface MessagesViewController ()
@property (strong, nonatomic) IBOutlet UIButton *Time30Minutes;
@property (strong, nonatomic) IBOutlet UIButton *Time1Hour;
@property (strong, nonatomic) IBOutlet UITextField *ImageLinkTF;
@property (strong, nonatomic) IBOutlet UIButton *SelectImageButton;
@property (strong, nonatomic) IBOutlet UIButton *GetImageButton;
@property (strong, nonatomic) IBOutlet UIImageView *ImageWindow;
@property (strong, nonatomic) IBOutletCollection(UIView) NSArray *InterfaceView;
@property (weak, nonatomic) NSNumber *currentDuration;
@property (strong, nonatomic) NSURL* savedURL;
@property (strong, nonatomic) SFSafariViewController *viewSF;
@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSString* token = @"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZlbG9wZXJUb2tlbiI6IjU4MTYyOThmOTYwYTg3NDQ5NDkwOTdjMCIsImlhdCI6MTQ3Nzg0NzQ2MywiZXhwIjoxNTcyNDU1NDYzfQ.mszuALEzb7EXyiaevLN4EQLcNKn8H_MkODRg5AVBzfA";
    self.currentDuration = [NSNumber numberWithInt: 1800];
    [Ebblink initWithToken:token andUserId:@"anything"];
    // Do any additional setup after loading the view.
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    MSConversation* currentConvo = self.activeConversation;
    if(currentConvo.selectedMessage.URL != nil)
    {
        // Create an SF View Controller here.
        
        //NSURLRequest *request = [NSURLRequest requestWithURL: currentConvo.selectedMessage.URL];
        self.viewSF = [[SFSafariViewController alloc] initWithURL: currentConvo.selectedMessage.URL];
        [self presentViewController:self.viewSF animated:YES completion:nil];
//        [self.viewUI loadRequest:request];
//        //imagepage.delegate = self;
//        [self.view addSubview:self.viewUI];
        
//        self.viewUI = [[SFSafariViewController alloc] initWithURL: currentConvo.selectedMessage.URL];
//        //imagepage.delegate = self;
//        [self presentViewController:self.viewUI animated:YES completion:nil];
    }
    
    // Use this method to prepare for the change in presentation style.
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
}
- (IBAction)GenerateLinkFromImage:(id)sender {
    if(self.ImageWindow.image != nil)
    {
        // do image stuff
        [Ebblink p3ImageUpload:self.ImageWindow.image duration:self.currentDuration completion: ^(NSString *imageId, NSString *deepLink, NSString* error) {
            if(error != nil) // encountered an error
            {
                NSLog(@"%@", error);
                return;
            }
            NSLog(@"Generated URL: %@", deepLink); // Prints successfully.
            
            self.ImageLinkTF.text = deepLink; // Replace this by instead preparing a new message window.
            self.savedURL = [NSURL URLWithString: deepLink];
            
            NSLog(@"Saved URL: %@",self.savedURL); // Prints successfully, so the URL is definitely being saved.
            NSLog(@"image line %@",self.ImageLinkTF.text);
            [self PrepareMessage: self.savedURL]; //Uncomment to have an iMessage bubble show up when "Get Link" is pressed.
        }];
    }
    else
    {
        self.ImageLinkTF.text = @"No image selected. Please select one!";
    }
}

- (void) PrepareMessage:(NSURL*) url {
    MSMessage* message = [[MSMessage alloc] init];
    MSMessageTemplateLayout* ms = [[MSMessageTemplateLayout alloc] init];
    //ms.caption = self.ImageLinkTF.text;
    ms.caption = @"Tap here to view image!";
    message.layout = ms;
    NSLog(@"Adding this URL: %@", url); // Prints successfully.
    message.URL = url; // Adds the URL to the message objcet. 
    MSConversation* mc = self.activeConversation;
    [mc insertMessage: message completionHandler: ^(NSError* error) {
        if(error != nil) {
            NSLog(@"%@", error);
            return;
        }
    }];
    [self dismiss];
}

- (IBAction)SelectImageFromCameraRoll:(id)sender {
    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
    picker.delegate = self;
    picker.allowsEditing = NO;
    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
    [self presentViewController:picker animated:YES completion:NULL];
}

- (IBAction)SetTimeToHalfHour:(id)sender {
    self.currentDuration = [NSNumber numberWithInt:1800];
    self.ImageLinkTF.text = @"Time set to 30 minutes.";
}

- (IBAction)SetTimeToHour:(id)sender {
    self.currentDuration = [NSNumber numberWithInt:3600];
    self.ImageLinkTF.text = @"Time set to 1 hour.";
}

- (void) willBecomeActiveWithConversation:(MSConversation*) conversation {
    //SFSafariViewController SFView = [[SFSafariViewController alloc] initWithURL: [NSURL URLWithString: self.ImageLinkTF.text]];
    MSConversation* currentConvo = conversation;
    if(currentConvo.selectedMessage.URL != NULL)
    {
        NSLog(@"Attempting to load URL: %@", currentConvo.selectedMessage.URL); // These lines runs when the app bubble is tapped.
 // NSURL* test =  [NSURL URLWithString: @"http://serebii.net"];
        self.viewSF = [[SFSafariViewController alloc] initWithURL: currentConvo.selectedMessage.URL];
        [self presentViewController:self.viewSF animated:YES completion:nil];
//        NSURLRequest *request = [NSURLRequest requestWithURL: currentConvo.selectedMessage.URL];
//        self.viewUI = [[UIWebView alloc] init];
//        [self.viewUI loadRequest:request];
//        //imagepage.delegate = self;
//        [self.view addSubview:self.viewUI];
        //[self presentViewController:self.viewUI animated:YES completion:nil];
    }
}

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
    UIImage *image = info[UIImagePickerControllerOriginalImage];
    if(image != nil)
    {
        NSLog(@"setting image...");
        [self.ImageWindow setImage:image];
        self.ImageWindow.image = image;
    }
    else
    {
        self.ImageLinkTF.text = @"Image is invalid. Please try again.";
    }
    [picker dismissViewControllerAnimated:YES completion:NULL];
    
}

@end
